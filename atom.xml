<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LEE</title>
  
  <subtitle>LEE BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chubbylee-math.github.io/"/>
  <updated>2020-07-09T13:55:21.333Z</updated>
  <id>https://chubbylee-math.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chubbylee-math.github.io/2020/07/09/hello-world%20copy/"/>
    <id>https://chubbylee-math.github.io/2020/07/09/hello-world%20copy/</id>
    <published>2020-07-09T03:15:17.437Z</published>
    <updated>2020-07-09T13:55:21.333Z</updated>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/img/测试/1.pdf" width="100%" height="550" type="application/pdf"></div><iframe src="/img/测试/1.pdf"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/img/测试/1.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;




&lt;iframe src=&quot;/img/测试/1.pdf
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://ChubbyLEE-Math.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="测试" scheme="https://ChubbyLEE-Math.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python 基础五</title>
    <link href="https://chubbylee-math.github.io/2020/07/08/python%20%E5%9F%BA%E7%A1%80%E4%BA%94/"/>
    <id>https://chubbylee-math.github.io/2020/07/08/python%20%E5%9F%BA%E7%A1%80%E4%BA%94/</id>
    <published>2020-07-08T08:41:31.798Z</published>
    <updated>2020-07-08T08:48:20.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="捕捉异常、模块、包、文件基础错操作"><a href="#捕捉异常、模块、包、文件基础错操作" class="headerlink" title="捕捉异常、模块、包、文件基础错操作"></a>捕捉异常、模块、包、文件基础错操作</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="1、捕捉异常点"><a href="#1、捕捉异常点" class="headerlink" title="1、捕捉异常点"></a>1、捕捉异常点</h3><p>一旦出错，还要一级一级上报，知道查到某个函数可以处理该错误（比如，给用户输出一个错误信息）。所以高级语言通常可以内置一套 try..expect..finally. .的错误处理机制，Python也不例外。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'try...'</span>)</span><br><span class="line">    r = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    print(<span class="string">'result:'</span>,r)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'except:'</span>,e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'finally...'</span>)</span><br><span class="line">print(<span class="string">'END'</span>)</span><br><span class="line">-------------------------</span><br><span class="line">        <span class="keyword">try</span>...</span><br><span class="line">        <span class="keyword">except</span>: division by zero</span><br><span class="line">        <span class="keyword">finally</span>...</span><br><span class="line">        END</span><br></pre></td></tr></table></figure><p>当我们认为某些代码可能会出错时，就可以用 <code>try</code> 来运行这段代码，如果执行出错，则<strong>后续代码不会继续执行</strong> ，而是直接跳转至错误处理代码，及 <code>except</code> 语句块，执行完 <code>except</code> 后，如果有 <code>finally</code>  语句块，则执行<code>finally</code> 语句块，至此，执行完毕。</p><p>上面的代码在计算 <code>10/0</code> 时会产生一个除法运算错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line"><span class="keyword">except</span>: division by zero</span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>从输出可以看出，当发生错误时，后续语句 <code>print(&#39;result:&#39;,r)</code> 不会被执行，<code>except</code> 由于捕捉到 <code>ZeroDivisionError</code> ，因此被执行。最后，<code>fianlly</code> 语句被执行。</p><p> 如果把 <code>0</code> 改成 <code>2</code> ，则执行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line">result: <span class="number">5.0</span></span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>由于没有错误发生，所以 <code>except</code> 语句块不会被执行，但是 <code>finally</code> 如果有，则一定会被执行(可以没有<code>finally</code> 语句)。</p><p>错误应该有多种种类，如果发生了不同类型的错误，应该由不同的 <code>except</code> 语句块处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'try...'</span>)</span><br><span class="line">    r = <span class="number">10</span> / int(<span class="string">'a'</span>)</span><br><span class="line">    print(<span class="string">'result:'</span>,r)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'ValueError:'</span>,e)    </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'except:'</span>,e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'finally...'</span>)</span><br><span class="line">print(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure><p><code>int()</code> 函数可能会抛出 <code>ValueError</code>，所以可以用一个<code>except</code> 来捕捉 <code>ValueError</code> ，用另一个 <code>except</code>  捕捉 <code>ZeroDivisionError</code>。</p><p>此外，如果没有错误发生，可以在 <code>except</code> 后面加一个 <code>else</code> ，当没有错误发生时，会自动执行 <code>else</code> 语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'try...'</span>)</span><br><span class="line">    r = <span class="number">10</span> / int(<span class="string">'a'</span>)</span><br><span class="line">    print(<span class="string">'result:'</span>,r)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'ValueError:'</span>,e)    </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'except:'</span>,e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'no error!'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'finally...'</span>)</span><br><span class="line">print(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure><p>Python 的错误其实也是 <code>class</code> ，所有的错误类型都 <strong>继承</strong> 自 <code>BaseException</code> ，所以在使用 <code>except</code> 时需要注意的是，它不但捕获该类型的错误，还把其子类都一网打尽，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    foo()</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'ValueError'</span>)</span><br><span class="line"><span class="keyword">except</span> UnicodeError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'UnicodeError'</span>)</span><br></pre></td></tr></table></figure><p>第二个 <code>except</code> 永远也捕获不到 <code>UnicodeError</code> ,因为 <code>UnicodeError</code> 是 <code>ValueError</code> 的子类，如果有，也是被第一个 <code>except</code> 捕获了。</p><p>Python 所有错误都从 <code>BaseException</code> 类派生的，常见的错误类型和继承关系：</p><p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="noopener">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p><p>使用 <code>try...except</code> 捕获错误还有一个好处，就是可以跨越多层调用，比如函数 <code>main()</code> 调用 <code>foo()</code> ，<code>foo()</code> 调用 <code>bar()</code> , 结果 <code>bar()</code> 出错了，这时，只要 <code>main()</code> 捕获到了，就可以处理：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/int(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bars</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bar(<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Errot:'</span>,e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'finally...'</span>)</span><br></pre></td></tr></table></figure><p>也就是说不需要在每一个可能出错的地方去捕获错误，只要在合适的层次无捕获就可以了，这样可以大大减少写 <code>try...except...finally</code> 的麻烦。</p><p><strong>python 所有的标准异常类：</strong></p><table><thead><tr><th align="left">异常名称</th><th>描述</th></tr></thead><tbody><tr><td align="left">BaseException</td><td>所有异常的基类</td></tr><tr><td align="left">SystemExit</td><td>解释器请求退出</td></tr><tr><td align="left">KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td align="left">Exception</td><td>常规错误的基类</td></tr><tr><td align="left">StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td align="left">GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td align="left">SystemExit</td><td>Python 解释器请求退出</td></tr><tr><td align="left">StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td align="left">ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td align="left">FloatingPointError</td><td>浮点计算错误</td></tr><tr><td align="left">OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td align="left">ZeroDivisionError</td><td>除(或取模)零 (所有数据类型)</td></tr><tr><td align="left">AssertionError</td><td>断言语句失败</td></tr><tr><td align="left">AttributeError</td><td>对象没有这个属性</td></tr><tr><td align="left">EOFError</td><td>没有内建输入,到达EOF 标记</td></tr><tr><td align="left">EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td align="left">IOError</td><td>输入/输出操作失败</td></tr><tr><td align="left">OSError</td><td>操作系统错误</td></tr><tr><td align="left">WindowsError</td><td>系统调用失败</td></tr><tr><td align="left">ImportError</td><td>导入模块/对象失败</td></tr><tr><td align="left">KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td align="left">LookupError</td><td>无效数据查询的基类</td></tr><tr><td align="left">IndexError</td><td>序列中没有没有此索引(index)</td></tr><tr><td align="left">KeyError</td><td>映射中没有这个键</td></tr><tr><td align="left">MemoryError</td><td>内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td align="left">NameError</td><td>未声明/初始化对象 (没有属性)</td></tr><tr><td align="left">UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td align="left">ReferenceError</td><td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td align="left">RuntimeError</td><td>一般的运行时错误</td></tr><tr><td align="left">NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td align="left">SyntaxError</td><td>Python 语法错误</td></tr><tr><td align="left">IndentationError</td><td>缩进错误</td></tr><tr><td align="left">TabError</td><td>Tab 和空格混用</td></tr><tr><td align="left">SystemError</td><td>一般的解释器系统错误</td></tr><tr><td align="left">TypeError</td><td>对类型无效的操作</td></tr><tr><td align="left">ValueError</td><td>传入无效的参数</td></tr><tr><td align="left">UnicodeError</td><td>Unicode 相关的错误</td></tr><tr><td align="left">UnicodeDecodeError</td><td>Unicode 解码时的错误</td></tr><tr><td align="left">UnicodeEncodeError</td><td>Unicode 编码时错误</td></tr><tr><td align="left">UnicodeTranslateError</td><td>Unicode 转换时错误</td></tr><tr><td align="left">Warning</td><td>警告的基类</td></tr><tr><td align="left">DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td align="left">FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td align="left">OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td align="left">PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td align="left">RuntimeWarning</td><td>可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td align="left">SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td align="left">UserWarning</td><td>用户代码生成的警告</td></tr></tbody></table><h3 id="2-模块"><a href="#2-模块" class="headerlink" title="2. 模块"></a>2. 模块</h3><p><strong>模块：</strong> 通俗理解一个 .py 文件就是一个模块，模块是管理功能代码的。</p><p><strong>内置模块：</strong> 就是 Python 自己内部自带的模块，如 time、random 等。</p><h4 id="2-1-自定义模块的使用"><a href="#2-1-自定义模块的使用" class="headerlink" title="2.1 自定义模块的使用"></a>2.1 自定义模块的使用</h4><p>注意：自定义模块名字和变量名定义很类似，都是由字母、数字、下划线组成，但是不能以数字开头。</p><p><strong>创建名为 first_model 的自定义模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">'f_num'</span>,<span class="string">'show'</span>]</span><br><span class="line"><span class="comment"># 指定 __all__表示 from 模块名 import * 只能使用指定的功能代码，而不是所有的功能代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">g_num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'我是一个函数'</span>)</span><br><span class="line"><span class="comment"># 定义类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sge = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_msg</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name,self.age)</span><br><span class="line"><span class="comment"># 解决导入的模块中方法没有调用就会执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    show()</span><br></pre></td></tr></table></figure><p><strong>使用自定义的模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="comment"># 1. import 直接导入</span></span><br><span class="line"><span class="keyword">import</span> first_model </span><br><span class="line"><span class="comment"># 使用模块中的功能代码</span></span><br><span class="line">print(first_model.g_num)</span><br><span class="line">first_model.show()</span><br><span class="line">stu = first_model.Student(<span class="string">'李四'</span>,<span class="number">20</span>)</span><br><span class="line">stu.show_msg()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 从first——model 这个模块导入 show 的方法</span></span><br><span class="line"><span class="keyword">from</span> first_model <span class="keyword">import</span> show </span><br><span class="line"></span><br><span class="line"><span class="comment"># 给模块起别名(避免多个模块中有一样的名字)</span></span><br><span class="line"><span class="keyword">from</span> second_model <span class="keyword">import</span> show <span class="keyword">as</span> second_show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入一个模块的多个方法</span></span><br><span class="line"><span class="keyword">from</span> first_model <span class="keyword">import</span> show,Student</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入一个模块的多个方法</span></span><br><span class="line"><span class="keyword">from</span> first_model <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 使用 <code>__name__</code> 查看模块名，执行哪个文件，哪个文件中的 <code>__name__</code>输出<code>__main__</code> ,其他导入的 <code>__name__</code> 结果就是模块名字。</p><blockquote><p>模块导入注意点：<br>     1. 自定义的模块名不要和系统的模块名重名，<br>     2. 导入的功能代码不要再当前模块定义否则使用不了导入模块的功能代码</p></blockquote><h3 id="3-包的介绍"><a href="#3-包的介绍" class="headerlink" title="3. 包的介绍"></a>3. 包的介绍</h3><p><strong>包：</strong> 通俗理解包就是一个文件夹，只不过文件夹里由一个 <strong>init.py</strong> 文件，包是管理模块的，模块是管理功能代码的。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -----import 导入包里的模块-----</span></span><br><span class="line"><span class="keyword">import</span> first_package.first</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----import 导入包里的模块设置别名-----</span></span><br><span class="line"><span class="keyword">import</span> first_package.first <span class="keyword">as</span> one</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----from 导入包名 import 模块名-----</span></span><br><span class="line"><span class="keyword">from</span> first_package <span class="keyword">import</span> second</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----from 包名.模块名 import 功能代码-----</span></span><br><span class="line"><span class="keyword">from</span> first_package.first <span class="keyword">import</span> show</span><br><span class="line"></span><br><span class="line"><span class="comment"># =====form 包名 import* ，默认不会导入包里面的所有模块，需要在init 文件里面使用 __all__ 去指定导入的模块</span></span><br><span class="line"><span class="keyword">from</span> first_packageckage <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p><code>__init__</code> 文件写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果外界使用 from 包名 import *  ，默认不会导入包里面的所有模块，需要使用 __all__指定 __all__ =['first','second']</span></span><br><span class="line"><span class="comment"># 从当前包导入对应模块</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> first</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> second</span><br></pre></td></tr></table></figure><h3 id="4-文件的基本操作"><a href="#4-文件的基本操作" class="headerlink" title="4. 文件的基本操作"></a>4. 文件的基本操作</h3><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>要以读文件的模式打开一个文件对象，要使用Python 内置的 <code>open()</code> 函数，传入文件名和标识符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/Users/python/test.txt'</span>,<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure><p>标识符 ‘r’ 表示读， 这样，就成功地打开了一个文件。</p><p>如果文件打开成功，可以用<code>read()</code> 方法读取全部内容。Python 把内容读到内存，用一个<code>str</code> 对象表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">'Hello,world'</span></span><br></pre></td></tr></table></figure><p><strong>最后一步</strong> 调用<code>close()</code> 方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure><p>由于文件读写时可能产生 <code>IOError</code> ,一旦出错，后面的 <code>f.close()</code> 也就不会调用，所以，为了保证无论是否出错都能正确关闭文件，可以使用 <code>try...finally</code> 来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f = open(<span class="string">'/Users/python/test.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>但是每次这样写太麻烦，所以 Python 引入 <code>with</code> 语句来自动帮我我们调用 <code>close()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/python/test.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">print(f.read())</span><br></pre></td></tr></table></figure><p>调用 <code>read()</code> 会一次性读取文件的全部内容，如果文件很大，内存就爆了。保险起见，可以反复调用 <code>read(size)</code> 方法，每次最多读取size 个字节的内容。另外，<code>readline()</code> 可以每次读取一行内容，调用<code>readlines()</code> 一次读取所有内容并按行返回 <code>list</code> 。</p><p>如果文件很小，<code>read()</code> 一次读取最方便；如果不能确定文件大小，反复调用<code>read(size)</code> 比较保险；如果是配置文件，调用 <code>readlines()</code> 最方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">print(line.strip()) <span class="comment"># 把末尾的'/n' 删掉</span></span><br></pre></td></tr></table></figure><h4 id="文件的打开方式"><a href="#文件的打开方式" class="headerlink" title="文件的打开方式"></a>文件的打开方式</h4><table><thead><tr><th><strong>模式</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>r</strong></td><td><strong>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</strong></td></tr><tr><td><strong>w</strong></td><td><strong>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</strong></td></tr><tr><td><strong>a</strong></td><td><strong>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</strong></td></tr><tr><td><strong>rb</strong></td><td><strong>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</strong></td></tr><tr><td><strong>wb</strong></td><td><strong>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</strong></td></tr><tr><td><strong>ab</strong></td><td><strong>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</strong></td></tr><tr><td><strong>r+</strong></td><td><strong>打开一个文件用于读写。文件指针将会放在文件的开头.</strong></td></tr><tr><td><strong>w+</strong></td><td><strong>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</strong></td></tr><tr><td><strong>a+</strong></td><td><strong>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</strong></td></tr><tr><td><strong>rb+</strong></td><td><strong>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</strong></td></tr><tr><td><strong>wb+</strong></td><td><strong>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</strong></td></tr><tr><td><strong>ab+</strong></td><td><strong>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</strong></td></tr></tbody></table><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>要读取非 UTF-8 编码的文本文件，需要给 <code>open()</code> 函数传入 <code>encoding</code> 参数，例如，读取GBK编码的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f= open(<span class="string">'/Users/python/test.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'gbk'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br></pre></td></tr></table></figure><p>遇到编码不规范的文件，可能会遇到 <code>UnicodeDecodeError</code>，因为文本文件中可能夹杂了一些非法变法的字符。遇到这种情况，<code>open()</code> 函数还接受一个 <code>errors</code> 参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/Users/python/test.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'gbk'</span>,errors=<span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>写文件和读文件一样，唯一区别是调用 <code>open()</code> 函数时，传入 表示符 <code>&#39;w&#39;</code> 或者 <code>&#39;wb&#39;</code> 表示写文本文件或者二进制文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/Users/python/test.txt'</span>,<span class="string">'w'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'Hello,Woeld!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure><p>可以反复使用 <code>write()</code> 来写入文件，但是必须要使用 <code>f.close()</code> 来关闭文件。当我们写如文件时，操作系统往往不会立马把数据写入磁盘，而是放到缓存里空闲时间再慢慢写入。只有调用 <code>close()</code> 方法时，操作系统才能保证包所有数据写入磁盘。所以还是可以利用 <code>with</code> 语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/python/test.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(<span class="string">'Hello,world!'</span>)</span><br></pre></td></tr></table></figure><p>要写入特定编码文本文件，要给 <code>open()</code> 函数传入 <code>encoding</code> 参数，将字符串转换为指定编码</p><p><strong>注意：</strong> 以<code>&#39;w&#39;</code> 模式写入文件时，如果文件已经存在，会直接覆盖（相当于删掉后新写入一个文件）。可以传入 <code>&#39;a&#39;</code> 来追加 （append）模式写入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;捕捉异常、模块、包、文件基础错操作&quot;&gt;&lt;a href=&quot;#捕捉异常、模块、包、文件基础错操作&quot; class=&quot;headerlink&quot; title=&quot;捕捉异常、模块、包、文件基础错操作&quot;&gt;&lt;/a&gt;捕捉异常、模块、包、文件基础错操作&lt;/h1&gt;&lt;h2 id=&quot;知识点&quot;&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://ChubbyLEE-Math.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://ChubbyLEE-Math.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python 基础四</title>
    <link href="https://chubbylee-math.github.io/2020/07/07/python%20%E5%9F%BA%E7%A1%80%E5%9B%9B/"/>
    <id>https://chubbylee-math.github.io/2020/07/07/python%20%E5%9F%BA%E7%A1%80%E5%9B%9B/</id>
    <published>2020-07-07T10:22:23.267Z</published>
    <updated>2020-07-09T03:10:28.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象、类、继承、多态"><a href="#面向对象、类、继承、多态" class="headerlink" title="面向对象、类、继承、多态"></a>面向对象、类、继承、多态</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="1、面向对象编程"><a href="#1、面向对象编程" class="headerlink" title="1、面向对象编程"></a>1、面向对象编程</h3><p>面向对象编程–Object Oriented Programming,简称 OOP，是一种程序设计思想。OOP 把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p><p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的有序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把一大块函数通过切割成小块函数来降低系统的复杂度。</p><p>而面向对象的程序设计把计算机程序视为一组对象集合，而每个对象都可以接受其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一些列消息在各个对象之间的传递。</p><p>Python中所有的数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class) 的概念。</p><p>一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个 dict 表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std1 = &#123;<span class="string">'name'</span>:<span class="string">'Curry'</span>,<span class="string">'score'</span>:<span class="number">98</span>&#125;</span><br><span class="line">std1 = &#123;<span class="string">'name'</span>:<span class="string">'James'</span>,<span class="string">'score'</span>:<span class="number">81</span>&#125;</span><br></pre></td></tr></table></figure><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(std)</span>:</span></span><br><span class="line">  print(<span class="string">'%s: %s'</span> % (std[<span class="string">'name'</span>],std[<span class="string">'score'</span>]))</span><br></pre></td></tr></table></figure><p>如果采用面向对象的程序设计思想，我们首先思考的不是程序的执行流程，而是 Student 这种数据类型应该被视为一个对象，这个对象拥有 name 和 score 这个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 print_score 的消息，让对象自己把自己的数据打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">      self.score = score</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'%s: %s'</span> % (self.name,self.score))</span><br></pre></td></tr></table></figure><p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method) 。面向对象的程序写出来就这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bart = Student(<span class="string">'Bart Simpson'</span>,<span class="number">59</span>)</span><br><span class="line">lisa = Srudent(<span class="string">'Lisa Simpson'</span>,<span class="number">87</span>)</span><br><span class="line">bart.print_score()</span><br><span class="line">lisa.print_score()</span><br></pre></td></tr></table></figure><p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（instance）的概念是很自然的。Class 是一种抽象概念，比如我们定义的 class–Student ，是指学生这个概念，而实例（instance）则是一个个具体的 student，例如，Bart Simpson 和 Lisa Simpson是两个具体的 Student。</p><p>所以，面向对象的设计思想是抽象出来的 Class，根据Class 创建 instance。</p><p>面向对象的抽象程度又比函数要高，因为一个Class 既包含数据，又包含操作数据的方法。</p><h3 id="2、类和对象"><a href="#2、类和对象" class="headerlink" title="2、类和对象"></a>2、类和对象</h3><p>面向对象编程的两个重要概念：类和对象</p><p>对象是面向对象编程的核心，在使用对象的过程中，为了将具有共同特征和行为的一组对象抽象定义，提出了另外一个新的概念–类</p><p>类就相当于制造飞机时的图纸，用它来进行创建的飞机就相当于对象。</p><h4 id="1、类"><a href="#1、类" class="headerlink" title="1、类"></a>1、类</h4><blockquote><p>人以物聚，物以群分。具有相似内部状态和运动规律的实体的集合(或统称为抽象)。具有相同的属性和行为事物的统称 类是抽象的，在使用的时候通常会找到这个类的一个具体的存在，使用这个具体的存在。一个类可以找到多个对象</p></blockquote><img src="/img/python基础四/1.jpg" width = "100%" height = "80%"><h4 id="2、对象"><a href="#2、对象" class="headerlink" title="2、对象"></a>2、对象</h4><blockquote><p>某个具体失误的存在，在现实世界中可以是看得见摸得着的。可以直接使用的</p></blockquote><img src="/img/python基础四/2.jpg" width = "100%" height = "80%"><h4 id="3、类和对象之间的关系"><a href="#3、类和对象之间的关系" class="headerlink" title="3、类和对象之间的关系"></a>3、类和对象之间的关系</h4><p><strong>总结：类就就是创建对象的模板</strong></p><h4 id="4、定义类和创建对象"><a href="#4、定义类和创建对象" class="headerlink" title="4、定义类和创建对象"></a>4、定义类和创建对象</h4><p>定义一个类，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名：</span></span><br><span class="line"><span class="class">方法列表</span></span><br><span class="line"><span class="class"># <span class="title">class</span> <span class="title">Hero</span>:</span> <span class="comment"># 经典类（旧式类）定义形式</span></span><br><span class="line"><span class="comment"># class Hero():</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span><span class="params">()</span>:</span> <span class="comment"># 新式类定义形式</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></span><br><span class="line">      print(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>定义类时有两种形式：新式类和经典类，上面代码中Hero为新式类，前两行注释部分为经典类；</li><li>object 是 python 里所有类的最顶级父类：</li><li>类名 的命名规则按照“大驼峰命名法”</li><li>info 是一个实例方法，第一个参数一般为 self，表示实例对象本身，当然了可以将self 换成为其他的名字，其作用是一个变量 这个变量指向了实例对象</li><li>python 中，可以根据已定义的类去创造出一个或多个类 </li></ul><p>创建对象的格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">对象名<span class="number">1</span> = 类名()</span><br><span class="line">对象名<span class="number">2</span> = 类名()</span><br><span class="line">对象名<span class="number">3</span> = 类名()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span><span class="params">(object)</span>:</span> <span class="comment"># 新式类定义形式</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  info 是一个实例方法，类对象可以调用的实例方法，实例方法的第一参数一定是 self</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    当对象调用实例方法时，python会自动将对象本身的引用作为参数，传递到实例方法的第一个参数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(self)</span><br><span class="line">    print(<span class="string">'self各不相同'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Hero 这个类 实例化一个对象</span></span><br><span class="line">hero = Hero()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象调用实例方法 info(),执行 info()里的代码</span></span><br><span class="line"><span class="comment"># . 表示选择属性或方法</span></span><br><span class="line">hero.info()</span><br><span class="line">print(hero) <span class="comment"># 打印对象，则默认打印对象在内存的地址，结果等同于 info 里的 print(self)</span></span><br></pre></td></tr></table></figure><h3 id="3、对象的属性和方法"><a href="#3、对象的属性和方法" class="headerlink" title="3、对象的属性和方法"></a>3、对象的属性和方法</h3><h4 id="1、添加和获取对象的属性"><a href="#1、添加和获取对象的属性" class="headerlink" title="1、添加和获取对象的属性"></a>1、添加和获取对象的属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  定义了一个英雄类，可以移动和攻击</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    实例方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"正在前往事发地点..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个英雄对象</span></span><br><span class="line">hero = Hero()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给对象添加属性，以及对应的属性值</span></span><br><span class="line">hero.name = <span class="string">"德玛西亚"</span> <span class="comment"># 姓名</span></span><br><span class="line">hero.hp = <span class="number">2600</span> <span class="comment"># 生命值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过.成员选择运算符，获取对象的属性值</span></span><br><span class="line">print(<span class="string">"英雄 %s 的生命值：%d"</span> % (hero.name,hero.hp))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过. 成员选择运算符，获取对象的实例方法</span></span><br><span class="line">taidamier.move()</span><br></pre></td></tr></table></figure><h4 id="2、通过self-获取对象属"><a href="#2、通过self-获取对象属" class="headerlink" title="2、通过self 获取对象属"></a>2、通过self 获取对象属</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  定义了一个英雄类，可以移动和攻击</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    实例方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"正在前往事发地点..."</span>)</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span></span></span><br><span class="line"><span class="function">  """</span></span><br><span class="line"><span class="function">  在类的实例方法中，通过<span class="title">self</span>获取该对象的属性</span></span><br><span class="line"><span class="function">  """</span></span><br><span class="line"><span class="function">  <span class="title">print</span><span class="params">(<span class="string">"英雄 %s 的生命值：%d "</span> % <span class="params">(self.name,self.hp)</span>)</span></span></span><br><span class="line"><span class="function"># 实例化一个英雄对象</span></span><br><span class="line">hero = Hero()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给对象添加属性，以及对应的属性值</span></span><br><span class="line">hero.name = <span class="string">"德玛西亚"</span> <span class="comment"># 姓名</span></span><br><span class="line">hero.hp = <span class="number">2600</span> <span class="comment"># 生命值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 .成员选择运算符，获取对象的实例方法</span></span><br><span class="line">hero.info() <span class="comment"># 只需要调用实例方法 info(),即可获取英雄的属性</span></span><br><span class="line">hero.move()</span><br></pre></td></tr></table></figure><h4 id="3、init-魔法方法"><a href="#3、init-魔法方法" class="headerlink" title="3、init 魔法方法"></a>3、init 魔法方法</h4><p><strong>init方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  定义一个英雄，可以移动和攻击</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="comment"># python 的类里提供的，两个下划线开始，两个下划线结束的方法，就是魔法方法，__init__() 就是一个魔法方法，通常用来做属性初始化、或、赋值、操作</span></span><br><span class="line">  <span class="comment"># 如果类里没有写 __init__ 方法，python 会自动创建，但是不执行任何操作，</span></span><br><span class="line">  <span class="comment"># 如果为了能够在完成自己想要的功能，可以自己定义__init__ 方法</span></span><br><span class="line">  <span class="comment"># 所以一个类里无论自己是否编写 __init__ 方法，一定有 __init__ 方法</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用来做变量初始化、或、赋值操作，再类实例化对象的时候，会被自动调用</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.name = <span class="string">"hero"</span> <span class="comment"># 姓名</span></span><br><span class="line">    self.hp = <span class="number">2600</span> <span class="comment"># 生命值</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    实例方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'正在前往实发地点、、、'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例化了一个英雄对象，并自动调用 __init__()方法</span></span><br><span class="line">hero = Hero()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 .成员选择运算符，获取对象的实例方法</span></span><br><span class="line">hero.info() <span class="comment"># 至于要调用实例方法info(), 即可获取英雄属性</span></span><br><span class="line">hero.move()</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>_<em>init_</em>() 方法，在创建一个对象时默认呗调用，不需要手动调用</li><li>_<em>init_</em>(self) 中的self 参数，不需要开发者传递，python解释器会自动把当前对象引用传递过去</li></ul><p><strong>有参数的init()方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  定义一个英雄类，可以移动和攻击</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,hp)</span></span></span><br><span class="line"><span class="function">  """</span></span><br><span class="line"><span class="function">  <span class="title">__init__</span><span class="params">()</span>方法，用来做变量初始化、或、赋值、操作</span></span><br><span class="line"><span class="function">  """</span></span><br><span class="line">  self.name = name</span><br><span class="line">    self.hp = hp</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    实例方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"%s 正在前往事发地点、、、"</span> % self.name)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"英雄 %s 的生命值：%d"</span> % (self.name,self.hp))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例化英雄对象时，参数会传递到对象__init__()方法里</span></span><br><span class="line">blind = Hero(<span class="string">"瞎子"</span>，<span class="number">2600</span>)</span><br><span class="line">gailun = Hero(<span class="string">'盖伦'</span>，<span class="number">4200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(gailun)</span></span><br><span class="line"><span class="comment"># print(blind)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同对象的属性值得单独保存</span></span><br><span class="line">print(id(blind.name()))</span><br><span class="line">print(id(gailun.name()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同一个类的不同对象实例方法共享</span></span><br><span class="line">print(id(blind.move()))</span><br><span class="line">print(id(gailun.move()))</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>通过一个类，可以创建多个对象，好比一个模具可以创建多个实体</li><li>_<em>init_</em>(self) 中，默认有一个参数名字为self，如果再创建对象时传递了2个实参，那么_<em>init_</em>(self) 中除了self 作为第一个形参外还需要两个形参，例如：_<em>init_</em>(self,x,y)</li><li>在类内部获取 属性 和实例方法，通过self 获取；</li><li>在类外部获取 属性 和 实例方法，通过对象名获取；</li><li>如果一个类有多个对象，内个对象的属性是各自保存的，都有各自独立的地址；</li><li>但是实例方法时所有对象共享的，只占一份内存。类会通过self来判断是哪个对象调用了实例方法。</li></ul><h3 id="4、继承"><a href="#4、继承" class="headerlink" title="4、继承"></a>4、继承</h3><ul><li>在程序中，继承描述的是过个类之间的所属关系。</li><li>如果一个类A里面的属性和方法可以重复使用，则可以通过继承的方法传递到类B里</li><li>那么类A就是 基类，也叫父类；类B就是派生类，也叫子类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.num = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_num</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.num + <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">print(b.num)</span><br><span class="line">b.print_num()</span><br></pre></td></tr></table></figure><h4 id="1、单继承"><a href="#1、单继承" class="headerlink" title="1、单继承"></a>1、单继承</h4><p><strong>单继承：</strong>子类只继承父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="comment"># 属性</span></span><br><span class="line">      self.name = <span class="string">'女娲'</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 实例方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">make_person</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"&lt;%s&gt; 造了一个人、、、"</span> % self.name)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义Teacher 类 继承了 Person 则Teacher是子类，Person是父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">  <span class="comment"># 子类可以继承父类的所有属性和方法，哪怕子类没有自己的属性和方法，也可以使用父类的属性和方法。</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">panda = Teacher() <span class="comment"># 创建子类实例对象</span></span><br><span class="line">print(panda.name) <span class="comment"># 子类对象可以直接使用父类属性</span></span><br><span class="line">damao.make_person() <span class="comment"># 子类对象可以直接使用父类的方法</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>虽然子类没有定义 _<em>init_</em> 方法初始化属性，也没有定义实例方法，但是父类有。所以只要创建子类的对象，就默认执行了哪个继承过来的__init__方法 </li><li>子类在继承的时候，在定义类时，小括号() 中为父类的名字</li><li>父类的属性、方法，会被继承给子类</li></ul><h4 id="2、多继承"><a href="#2、多继承" class="headerlink" title="2、多继承"></a>2、多继承</h4><p><strong>多继承:</strong> 子类继承多个父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.name = <span class="string">"女娲"</span> <span class="comment"># 实例变量，属性</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">make_person</span><span class="params">(self)</span>:</span> <span class="comment"># 实例方法</span></span><br><span class="line">    print(<span class="string">"&lt;%s&gt; 造了一个人、、、"</span> % self.name)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span> </span><br><span class="line">    print(<span class="string">'移动、、'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.name = <span class="string">"亚当"</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">make_person</span><span class="params">(self)</span>:</span> </span><br><span class="line">    print(<span class="string">"&lt;%s&gt; 造了一个人、、、"</span> % self.name)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span> </span><br><span class="line">    print(<span class="string">'跑、、'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Woman,Man)</span>:</span> <span class="comment"># 多继承，集成多个父类</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">ls = Person()</span><br><span class="line">print(ls.name)</span><br><span class="line">ls.make_person()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类的魔法属性 __mro__ 决定了属性和方法的查找顺序</span></span><br><span class="line">Print(Person.__mro__)</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>多继承可以继承多个父类，也继承了所有父类的属性</li><li><strong>注意：</strong> 如果多个父类中有同名的 属性和方法，则默认使用第一个父类的属性和方法（根据类的魔法属性 mro 的顺序查找）</li><li>多父类中，不重名的属性和方法不会有任何影响</li></ul><h4 id="3、重写父类的方法"><a href="#3、重写父类的方法" class="headerlink" title="3、重写父类的方法"></a>3、重写父类的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写：子类继承父类，父类的方法满足不了子类的需要可以对父类的方法进行重写</span></span><br><span class="line"><span class="comment"># 重写的特点：1、继承关系，1、方法名相同</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"跑起来了"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 因为父类的方法满足不了子类的需要，对其进行重写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">      print(<span class="string">"%s 跑起来了"</span> % self.name)</span><br><span class="line">      </span><br><span class="line">stu = Student(<span class="string">'王五'</span>，<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 调用方法的时候先从本类去找，如果本来没有再去父类去找，会遵循mro 的特点</span></span><br><span class="line">stu.run()</span><br></pre></td></tr></table></figure><h4 id="4、属性方法"><a href="#4、属性方法" class="headerlink" title="4、属性方法"></a>4、属性方法</h4><h5 id="1、类属性和实例属性"><a href="#1、类属性和实例属性" class="headerlink" title="1、类属性和实例属性"></a>1、类属性和实例属性</h5><p><strong>类属性</strong> 就是类对象所拥有的属性，它被所有类对象的实例对象所共有，在内次你中组存在一个副本，这个和C++ 中类的静态成员变量有点类似，对于共有的类属性，在类外可以通过类对象和实例对象访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">  name = <span class="string">'Tom'</span> <span class="comment"># 公有类属性</span></span><br><span class="line">  __age__ = <span class="number">12</span> <span class="comment"># 私有类属性</span></span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line">print(p.name) <span class="comment"># 正确</span></span><br><span class="line">print(people.name) <span class="comment"># 正确</span></span><br><span class="line">print(p.__age) <span class="comment"># 错误，不能在类外通过实例对象访问私有的类属性</span></span><br><span class="line">print(people.__age) <span class="comment"># 错误，不能再类外通过类对象访问私有类属性</span></span><br><span class="line">实例属性（对象属性）</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">  address = <span class="string">'山东'</span> <span class="comment"># 类属性</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.name = <span class="string">"xiaowang"</span> <span class="comment"># 实例属性</span></span><br><span class="line">      self.age = <span class="number">20</span> <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line">p.age = <span class="number">12</span> <span class="comment"># 实例属性</span></span><br><span class="line">print(p.address) <span class="comment"># 正确</span></span><br><span class="line">print(p.name) <span class="comment"># 正确</span></span><br><span class="line">print(p.age) <span class="comment"># 正确</span></span><br><span class="line"></span><br><span class="line">print(People.address) <span class="comment"># 正确</span></span><br><span class="line">print(People.name) <span class="comment"># 错误</span></span><br><span class="line">print(People.age) <span class="comment"># 错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过实例（对象）去修改类属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">  country = <span class="string">"china"</span> <span class="comment"># 类属性</span></span><br><span class="line">  </span><br><span class="line">print(People.country)</span><br><span class="line">p = People()</span><br><span class="line">print(p.country)</span><br><span class="line">p.country = <span class="string">'japan'</span></span><br><span class="line">print(p.country) <span class="comment"># 实例属性会屏蔽掉同名类属性</span></span><br><span class="line">print(People.country)</span><br><span class="line"><span class="keyword">del</span> .p.country <span class="comment"># 删除实例属性</span></span><br><span class="line">print(p.country)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>如果需要在类外修改类属性，必须通过类对象去引用然后进行修改，如果通过实例对象去引用，会产生一个同名的实例属性，这种方式修改是实例属性，不会影响到类属性，并且之后如果通过实例对对象去引用该名称属性，实例属性会强制屏蔽掉类属性，即引用的是实例属性，除非删除掉该实例属性。</p><h5 id="2、静态方法和类方法"><a href="#2、静态方法和类方法" class="headerlink" title="2、静态方法和类方法"></a>2、静态方法和类方法</h5><p><strong>(1) 类方法</strong></p><p>是类对象所拥有的方法，需要用修饰器@classmethod 来表示其为类方法，对于类方法，第一个参数必须是类对象，一般以cls作为第一个参数（当然可以用其他名称的变量作为其第一个参数，但是大部分人都习惯一cls作为第一个参数的名字，最好用cls）能够通过实例对象和类对象去访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">  country =<span class="string">'china'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 类方法，用classmethod 来进行修饰</span></span><br><span class="line"><span class="meta">  @classmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_country</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> cls.country</span><br><span class="line">  </span><br><span class="line">p = People()</span><br><span class="line">print(p.get_country()) <span class="comment"># 可以通过实例对象引用</span></span><br><span class="line">print(Pelple.get_country()) <span class="comment"># 可以通过类对象引用</span></span><br><span class="line">类方法还有一个用途 就是可以对类属性进行修改：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">  country = <span class="string">'china'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">  @classmethod </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_country</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> cls.country</span><br><span class="line"><span class="meta">  @classmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_country</span><span class="params">(cls,country)</span>:</span></span><br><span class="line">    cls.country = country</span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line">print(p.get_country()) <span class="comment"># 可以通过实例对象访问</span></span><br><span class="line">print(People.get_country()) <span class="comment"># 可以通过类访问</span></span><br><span class="line"></span><br><span class="line">p.set_country(<span class="string">'japan'</span>)</span><br><span class="line">print(p.get_country)</span><br><span class="line">print(People.get_country())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示在用类方法对类属性修改后，通过类对象和实例对象访问都发生了改变</span></span><br></pre></td></tr></table></figure><p><strong>(2) 静态方法</strong></p><p>需要通过修饰其 @classmethod 来进行修饰，静态方法不需要多定义参数，可以通过对象和类来访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">  country = <span class="string">'china'</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">  @staticmethod</span></span><br><span class="line">  <span class="comment"># 静态方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_country</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> People.country</span><br><span class="line">  </span><br><span class="line">p = People()</span><br><span class="line"><span class="comment"># 通过对象访问静态方法</span></span><br><span class="line">p.get_country()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过类访问静态方法</span></span><br><span class="line">print(People.get_country())</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>从类方法和实例以及静态方法的定义形式可以看出来，类方法的第一个参数时类对象cls，那么通过cls 引用的必定是类对象的属性和方法；实例方法的第一个参数时实例对象self，那么通过self引用的可能是类属性、也可能是实例属性（这个需要分析），不过在存在相同名称的雷属性和实力属性的情况下，实例属性优先级更高。静态方法中不需要额外定义参数，因此在静态方法中引用雷属性的话，必须通过类实例来引用。</p><h3 id="5、多态"><a href="#5、多态" class="headerlink" title="5、多态"></a>5、多态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">多态，不同的 子类对象调用 相同的 父类方法，产生不同的执行结果，可以增加代买的外部，调用灵活</span></span><br><span class="line"><span class="string">多态以 继承和重写父类方法为前提</span></span><br><span class="line"><span class="string">多态是调用方法的技巧，不会影响带类的内部设计</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"Animal is running..."</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Dog is running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(self)</span>:</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Cat is running...'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_twice</span><span class="params">(animal)</span>:</span></span><br><span class="line">  animal.run()</span><br><span class="line">  animal.run()</span><br><span class="line">  </span><br><span class="line">dog = Dog()</span><br><span class="line">cat = Cat()</span><br><span class="line">run_twice(dog)</span><br><span class="line">run_twice(cat)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象、类、继承、多态&quot;&gt;&lt;a href=&quot;#面向对象、类、继承、多态&quot; class=&quot;headerlink&quot; title=&quot;面向对象、类、继承、多态&quot;&gt;&lt;/a&gt;面向对象、类、继承、多态&lt;/h1&gt;&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class
      
    
    </summary>
    
    
      <category term="Python" scheme="https://ChubbyLEE-Math.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://ChubbyLEE-Math.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python 基础三</title>
    <link href="https://chubbylee-math.github.io/2020/07/07/python%20%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>https://chubbylee-math.github.io/2020/07/07/python%20%E5%9F%BA%E7%A1%80%E4%B8%89/</id>
    <published>2020-07-07T08:22:44.149Z</published>
    <updated>2020-07-07T08:26:06.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python 函数"></a>Python 函数</h1><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><h3 id="1、函数的简介"><a href="#1、函数的简介" class="headerlink" title="1、函数的简介"></a>1、函数的简介</h3><p>如果在开发过程中，需要某块代码多次，为了提高编写效率以及代码重用，所以把具有独立功能的代码块组建为一个小模块，这就是函数。python中提供了许多内建函数，如print()。用户可以自定义函数。</p><p>例如：计算圆的面积 S = $\pi r ^2$ </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r1 = <span class="number">12.34</span></span><br><span class="line">r2 = <span class="number">9.08</span></span><br><span class="line">r3 = <span class="number">73.1</span></span><br><span class="line">s1 = <span class="number">3.14</span> * r1 * r1</span><br><span class="line">s2 = <span class="number">3.14</span> * r2 * r2</span><br><span class="line">s3 = <span class="number">3.14</span> * r3 * r3</span><br></pre></td></tr></table></figure><h3 id="2、函数的定义和调用"><a href="#2、函数的定义和调用" class="headerlink" title="2、函数的定义和调用"></a>2、函数的定义和调用</h3><h4 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="(1) 定义函数"></a>(1) 定义函数</h4><p>定义函数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数[可选])</span>:</span></span><br><span class="line">功能性的代码</span><br><span class="line"><span class="comment"># 定义一个函数，能够完成打印信息的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">()</span>:</span></span><br><span class="line">  print(<span class="string">'----------------------------'</span>)</span><br><span class="line">  print(<span class="string">'     人生苦短，我用Python     '</span>)</span><br><span class="line">  print(<span class="string">'----------------------------'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="(2) 调用函数"></a>(2) 调用函数</h4><p>定义函数滞后，相当于有了一个具有某种功能的代码，想要让这些代码能够执行，需要调用它，调用函数很简单，通过 函数名() 即可完成调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数后，函数不会自动执行，需要调用它才可以</span></span><br><span class="line">printInfo()</span><br></pre></td></tr></table></figure><h4 id="3-注意："><a href="#3-注意：" class="headerlink" title="(3) 注意："></a>(3) 注意：</h4><ul><li>每次调用函数时，函数都会从头开始执行，当这个函数中的代码执行完毕后，意味着调用结束了</li><li>如果函数中执行了 return 也会结束函数</li></ul><h3 id="3、函数的文档说明"><a href="#3、函数的文档说明" class="headerlink" title="3、函数的文档说明"></a>3、函数的文档说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="string">'''求两个数的和'''</span></span><br><span class="line">    print(<span class="string">"%d"</span> %(a+b))</span><br><span class="line">test(<span class="number">11</span>,<span class="number">12</span>)</span><br><span class="line">help(test) <span class="comment"># 也可以用 print(test.__doc__)</span></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">23</span></span><br><span class="line">Help on function test <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">test(a, b)</span><br><span class="line">    求两个数的和</span><br></pre></td></tr></table></figure><h3 id="4、函数的参数"><a href="#4、函数的参数" class="headerlink" title="4、函数的参数"></a>4、函数的参数</h3><p>Python 的函数定义非常简单，但灵活度非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使用函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p><h4 id="1、位置参数"><a href="#1、位置参数" class="headerlink" title="1、位置参数"></a>1、位置参数</h4><p>我们先写一个计算 x^2 的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span> <span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x*x</span><br></pre></td></tr></table></figure><p>对于 power() 函数，参数 x 就会一个位置参数。</p><p>当调用 power 函数时，必须传入且仅有一个参数 x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">power(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line">power(<span class="number">25</span>)</span><br><span class="line"><span class="number">225</span></span><br></pre></td></tr></table></figure><p>现在，如果我们要计算 $x^3$ 怎么办？可以再定义一个 power3 函数，但是如果要计算 X^4, X^5……怎么办？我们不能定义无限多个函数。</p><p>定义 power(x,n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x,n)</span>:</span></span><br><span class="line">  s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    n = n<span class="number">-1</span></span><br><span class="line">        s = s*x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>对于这个修改后的 power(x,n) 函数，可以计算 n 次方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">power(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line">power(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">125</span></span><br></pre></td></tr></table></figure><p>修改后的 power(x,n) 函数有两个参数：x ， n ，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序赋值给 x 和 n 。</p><h4 id="2、默认参数"><a href="#2、默认参数" class="headerlink" title="2、默认参数"></a>2、默认参数</h4><p>新的 power(x，n)函数定义没有问题，但是就得代买失效了，原因是我们增加了一个参数，导致就得代码缺少一个参数而无法正常调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">power(<span class="number">5</span>)</span><br><span class="line">报错：缺少一个位置参数 n</span><br></pre></td></tr></table></figure><p>这个时候，就要使用默认参数进行定义，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x,n=<span class="number">2</span>)</span>:</span></span><br><span class="line">  s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">1</span>:</span><br><span class="line">      n = n - <span class="number">1</span></span><br><span class="line">      s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>这样，当我们调用 power(5) 时，就会默认为 power(5,2)</p><p>以上例子可以看出，默认参数可以简化函数调用。设置默认参数时要注意</p><ul><li>必选参数在前，默认参数在后，或者都是默认参数，否则报错</li><li>当函数有多个参数时，把变化大的参数放在前面，变化小的参数放在后面，变化小的参数可以作为默认参数。</li></ul><h4 id="3、使用默认参数的好处"><a href="#3、使用默认参数的好处" class="headerlink" title="3、使用默认参数的好处"></a>3、使用默认参数的好处</h4><p>例子：小学生注册的函数，需要传入 name 和 gender 两个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enroll</span><span class="params">(name,gender)</span>:</span></span><br><span class="line">  print(<span class="string">'name:'</span>,name)</span><br><span class="line">    print(<span class="string">'gender:'</span>,gender)</span><br></pre></td></tr></table></figure><p>这样调用 enroll() 函数只需要传入两个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enroll(<span class="string">'Sarah'</span>,<span class="string">'F'</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">name：Sarah</span><br><span class="line">gender：F</span><br></pre></td></tr></table></figure><p>如果要继续传入年龄、城市信息怎么办，这样会使得调用函数的复杂度加大</p><p>我们可以吧年龄和城市设为默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enroll</span><span class="params">(name,gender,age=<span class="number">6</span>,city=<span class="string">"Beijing"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'name:'</span>,name)</span></span></span><br><span class="line"><span class="function">  <span class="title">print</span><span class="params">(<span class="string">'gender:'</span>,gender)</span></span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">'age:'</span>,age)</span></span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">'city:'</span>,city)</span></span></span><br></pre></td></tr></table></figure><p>这样大多数学生在注册时不需要再提供年龄和城市，只需要两个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enroll(<span class="string">'Sarah'</span>,<span class="string">'F'</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">name:Sarah</span><br><span class="line">gender:F</span><br><span class="line">age:<span class="number">6</span></span><br><span class="line">city:Beijing</span><br></pre></td></tr></table></figure><p>只有与默认参数不符合的学生才需要额外提供信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enroll(<span class="string">'Bob'</span>,<span class="string">'M'</span>,<span class="number">7</span>)</span><br><span class="line">enroll(<span class="string">'Adam'</span>,<span class="string">'M'</span>,city=<span class="string">'Tianjing'</span>)</span><br></pre></td></tr></table></figure><p>可见，默认参数降低了函数调用难度，而一旦需要复杂调用时，又可以传递更多的参数来实现。意思是，除了 name ，gender 两个参数外，最后一个参数应用在 age city参数由于没有提供，任然是默认值。</p><p>也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如 enroll(‘Adam’,’M’,city=’Tianjing’) city 参数时传进去的，其他为默认值。</p><blockquote><p>注意：默认参数有个大坑，如下</p></blockquote><p>先定义一个函数，传入一个list，添加一个END 再返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">  L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>结果似乎不错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_end([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'END'</span>]</span><br><span class="line">add_end([<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>])</span><br><span class="line">[<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>,<span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>使用默认参数调用时，开始结果是对的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>但是，再次调用就出问题了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_end()</span><br><span class="line">[<span class="string">'END'</span>,<span class="string">'END'</span>]</span><br><span class="line">add_end()</span><br><span class="line">[<span class="string">'END'</span>,<span class="string">'END'</span>,<span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>解释：Python函数在定义的时候，默认参数L的值就被计算出来了，即[], 因为默认L 也是一个变量，它指向对象[],每次调用该函数，如果改变了L的内容，默认的呢绒就变了，不再是函数定义时的[]了。</p><ul><li>默认参数必须指向不变对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>那么无论调用多少次都没问题了。</p><p>str，None 这样的不变对象，对象内部数据不能修改，可以减少由于修改数据导致的错误。此外，由于对象不变，多任务环境下读取对象不需要加锁，同时读取一点问题没有。如果可以设计一个不变对象，尽量设计成不变对象。</p><h4 id="4、可变参数-list-或-tuple"><a href="#4、可变参数-list-或-tuple" class="headerlink" title="4、可变参数[list 或 tuple]"></a>4、可变参数[list 或 tuple]</h4><p>在pyrhon 中还可以定义可变参数。传入的参数个数是可变的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n*n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">  </span><br><span class="line">  结果：</span><br><span class="line">  calc(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">  <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果已经有了一个list 或tuple</span></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">calc(nums[<span class="number">0</span>],nums[<span class="number">1</span>],nums[<span class="number">2</span>])</span><br><span class="line">calc(*nums) <span class="comment"># 简便写法</span></span><br></pre></td></tr></table></figure><h4 id="5、命名关键字参数-字典"><a href="#5、命名关键字参数-字典" class="headerlink" title="5、命名关键字参数[字典]"></a>5、命名关键字参数[字典]</h4><p>对于关键字参数，调用者可以传入任意个不受限制的关键字参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name,age,**kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'city'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'job'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">'name:'</span>,name,<span class="string">'age:'</span>,age,<span class="string">'other:'</span>,kw)</span><br><span class="line">person(<span class="string">'Jack'</span>,<span class="number">24</span>,city=<span class="string">'Beijing'</span>,addr=<span class="string">'Chaoyang'</span>,zipcode=<span class="number">13728</span>)</span><br></pre></td></tr></table></figure><h4 id="6、参数组合"><a href="#6、参数组合" class="headerlink" title="6、参数组合"></a>6、参数组合</h4><p>在python中，必选参数、默认参数、可变参数、关键字参数、命名关键字参数。组合使用也是可以的，但是必须按照以上的殊勋。</p><h3 id="5、函数返回值"><a href="#5、函数返回值" class="headerlink" title="5、函数返回值"></a>5、函数返回值</h3><p>return</p><p>一个函数有多个返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divid</span><span class="params">(a,b)</span>:</span></span><br><span class="line">  shang = a/b</span><br><span class="line">  yushu = a%n</span><br><span class="line">  <span class="keyword">return</span> shang,yushu <span class="comment"># 默认元组</span></span><br><span class="line">result = divid(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="6、递归函数"><a href="#6、递归函数" class="headerlink" title="6、递归函数"></a>6、递归函数</h3><p>函数内部，自己调用自己</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归(自己调用自己)</span></span><br><span class="line"><span class="comment"># 5!= 5*4*3*2*1 --&gt; 5*4!</span></span><br><span class="line"><span class="comment"># 4!= 4*3*2*1       4*3!</span></span><br><span class="line"><span class="comment"># 3!= 3*2*1</span></span><br><span class="line"><span class="comment"># 2!= 2*1</span></span><br><span class="line"><span class="comment"># 1!= 1</span></span><br><span class="line"><span class="comment"># show()就是算一个数的阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="comment">#     result = 5 * 4!</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num * show(num<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">result = show(<span class="number">6</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="7、局部变量"><a href="#7、局部变量" class="headerlink" title="7、局部变量"></a>7、局部变量</h3><ul><li>局部变量：在函数内部定义的函数</li><li>作用范围在这个函数内部。</li><li>作用：为了零时保存数据需要在函数定义变量来进行存储</li><li>当函数调用时，局部变量呗创建，当函数调用完成后这个变量就不能用了</li></ul><h3 id="8、全局变量"><a href="#8、全局变量" class="headerlink" title="8、全局变量"></a>8、全局变量</h3><p>一个变量既能在一个函数中使用，也能在其他函数中使用，全局变量</p><p>在函数外定义的变量就是全局变量</p><p>全局变量能够在所有函数中进行访问</p><ul><li>当函数内出现局部变量和全局变量重名时，函数内部的 变量名 = 数据 可以理解为一个局部变量而不能修改全局变量。</li><li>修改全局变量  globle XX</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 局部变量和全局变量： 在函数里面的定义的变量就是局部，外面就是全局</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量，可以在函数内部使用（前提是函数内部没有跟全局变量重名的变量）</span></span><br><span class="line">g_age= <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 局部变量</span></span><br><span class="line">    <span class="comment"># global age # 函数内部想要修改全局变量的值的时候使用</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    print(age)</span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">print(age)</span><br><span class="line"><span class="comment"># 提示： 以后不要把全局变量和局部变量的名字设置成一样</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-函数&quot;&gt;&lt;a href=&quot;#Python-函数&quot; class=&quot;headerlink&quot; title=&quot;Python 函数&quot;&gt;&lt;/a&gt;Python 函数&lt;/h1&gt;&lt;h2 id=&quot;知识要点&quot;&gt;&lt;a href=&quot;#知识要点&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Python" scheme="https://ChubbyLEE-Math.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://ChubbyLEE-Math.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python 基础二</title>
    <link href="https://chubbylee-math.github.io/2020/07/07/python%20%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://chubbylee-math.github.io/2020/07/07/python%20%E5%9F%BA%E7%A1%80%E4%BA%8C/</id>
    <published>2020-07-07T08:05:42.459Z</published>
    <updated>2020-07-07T08:13:22.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-基础二"><a href="#Python-基础二" class="headerlink" title="Python 基础二"></a>Python 基础二</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="1、字符串（str"><a href="#1、字符串（str" class="headerlink" title="1、字符串（str)"></a>1、字符串（str)</h3><h4 id="1-1-字符串的定义"><a href="#1-1-字符串的定义" class="headerlink" title="1.1 字符串的定义"></a>1.1 字符串的定义</h4><p>用单引号，双引号，三个引号包围的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'hello'</span> <span class="comment"># 定义字符串变量</span></span><br><span class="line">str = <span class="string">"hello"</span></span><br><span class="line">str = <span class="string">"""hello</span></span><br><span class="line"><span class="string">hello"""</span> <span class="comment"># 定义多行字符串变量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">my_str = <span class="string">'hello'</span></span><br><span class="line"><span class="comment">#  h  e  l  l  o</span></span><br><span class="line"><span class="comment">#  0  1  2  3  4 索引</span></span><br><span class="line"><span class="comment"># -5 -4 -3 -2 -1</span></span><br><span class="line"><span class="comment"># 根据索引取值（不能越界）</span></span><br><span class="line"><span class="comment"># print(my_str[4])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最后一个元素</span></span><br><span class="line"><span class="comment"># print(my_str[-1])</span></span><br><span class="line"><span class="comment"># print(my_str[len(my_str)-1])</span></span><br></pre></td></tr></table></figure><h4 id="1-2-下标和切片"><a href="#1-2-下标和切片" class="headerlink" title="1.2 下标和切片"></a>1.2 下标和切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切片</span></span><br><span class="line">my_str = <span class="string">'hello'</span></span><br><span class="line"><span class="comment"># 数据[起始位置:结束位置:步长] 步长默认是 1,结束位置不包含</span></span><br><span class="line"><span class="comment"># result = my_str[1:4:1]</span></span><br><span class="line"><span class="comment"># result = my_str[:4]</span></span><br><span class="line"><span class="comment"># print(my_str[1:5])</span></span><br><span class="line"><span class="comment"># print(my_str[1:])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负数索引</span></span><br><span class="line"><span class="comment"># print(my_str[-2: :-1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒着获取数据</span></span><br><span class="line"><span class="comment"># result = my_str[-1:-6:-1]</span></span><br><span class="line"><span class="comment"># result = my_str[::-1]</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="comment"># type()</span></span><br><span class="line">print(type(my_str))</span><br></pre></td></tr></table></figure><blockquote><p>注：可用 dir(str) 查看 str. 可进行的操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历 ，for</span></span><br><span class="line">my_str = <span class="string">'hello'</span></span><br><span class="line"><span class="comment"># for value in range(0,len(my_str)):</span></span><br><span class="line"><span class="comment">#     print(my_str[value])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代对象（可遍历对象，list tuple)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for value in my_str:</span></span><br><span class="line"><span class="comment">#     print(value)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(my_str):</span><br><span class="line">    print(index,value)</span><br></pre></td></tr></table></figure><h4 id="1-3-字符串的常见操作"><a href="#1-3-字符串的常见操作" class="headerlink" title="1.3 字符串的常见操作"></a>1.3 字符串的常见操作</h4><p>如果有字符串 my_str =”hello world kkb”, 一下常见操作</p><p>1、find</p><p>检测 str 是否包含在 mystr 中，如果是返回开始索引值，否则返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_str.find (str,start = <span class="number">0</span>,end = len(mystr))</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">'hello world kkb'</span></span><br><span class="line">my_str.find(<span class="string">"kkb"</span>)</span><br><span class="line">运行结果为：<span class="number">12</span></span><br><span class="line">my_str.find(<span class="string">'kkb'</span>,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">运行结果为<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>2、index</p><p>和 find() 方法一样，不同的是如果 str 不在 my_str 那么会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_str.index(str,start = <span class="number">0</span>,end = len(my_str))</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">"hello world kkb"</span></span><br><span class="line">my_str.index(<span class="string">"ab"</span>)</span><br><span class="line">会报错</span><br></pre></td></tr></table></figure><p>3、count</p><p>返回 str 在 start 和 end 之间出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.count(str,start=<span class="number">0</span>,end=len(mystr))</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">"hello world kkb and kkb"</span></span><br><span class="line">mystr.count(<span class="string">'kkb'</span>)</span><br><span class="line">运行结果：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>4、replace</p><p>把 mystr 中的 str1 替换成为 str2 ,如果 count 指定则不超过 count 次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.replace(str1,str2,mystr.count(str1))</span><br></pre></td></tr></table></figure><p>5、split</p><p>以 str 为分隔符切片 mystr ,如果 maxsplit 有指定值，则仅分割 maxsplit 个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.split(str=<span class="string">''</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>6、capitalize</p><p>把字符串的第一个字符大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.capitalize()</span><br></pre></td></tr></table></figure><p>7、title</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'hello world'</span></span><br><span class="line">a.title()</span><br><span class="line">运行结果</span><br><span class="line">”Hello World“</span><br></pre></td></tr></table></figure><p>8、stratswith</p><p>检查字符串是否以 hello 开头，是则返回 True,否则返回 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.startswith(hello)</span><br></pre></td></tr></table></figure><p>9、endswith</p><p>检查字符串是否以 obj 结束，如果是返回 Ture ，否则返回 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.endswith(obj)</span><br></pre></td></tr></table></figure><p>10、lower</p><p>转换 mystr 中的大写字符为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.lower()</span><br></pre></td></tr></table></figure><p>11、upper</p><p>转换 mystr 中的小写为大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.upper()</span><br></pre></td></tr></table></figure><p>12、ljust</p><p>返回一个元字符串左对齐，并且空格填充至长度 width 的新字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.ljust(width)</span><br></pre></td></tr></table></figure><p>13、rjust</p><p>返回一个元字符串右对齐，并且空格填充至长度 width 的新字符串 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rjust(width)</span><br></pre></td></tr></table></figure><p>14、center</p><p>返回一个字符串居中，并用空格填充至长度 width </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.center(width)</span><br></pre></td></tr></table></figure><p>15、lstrip</p><p>删除 mystr 左边的空白字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.lstrip()</span><br></pre></td></tr></table></figure><p>16、rstrip</p><p>删除 mystr 右边的空白字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rstrip()</span><br></pre></td></tr></table></figure><p>17、strip</p><p>删除 mystr 字符串两端的空白符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"\n \t kkb \t\n"</span></span><br><span class="line">a.strip()</span><br><span class="line">运行结果：</span><br><span class="line">’kkb‘</span><br></pre></td></tr></table></figure><p>18、rfind</p><p>类似于 find() 函数，不过是从右边开始查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rfind(str,strat&#x3D;0,end&#x3D;len(mystr))</span><br></pre></td></tr></table></figure><p>19、rindex</p><p>类似于 index() 不过从右边开始查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rindex(str,start=<span class="number">0</span>,end=len(mystr))</span><br></pre></td></tr></table></figure><p>20、partition</p><p>把 mystr 以 str 分割成三部分，str 前，str，str 后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.partition(str)</span><br></pre></td></tr></table></figure><p>21、rpartition</p><p>类似于 partition 只不过从右边开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rpartition(str)</span><br></pre></td></tr></table></figure><p>22、splitlines（）</p><p>按照分格符，返回一个包含各行作为元素的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.splitlines()</span><br></pre></td></tr></table></figure><p>23、join</p><p>mystr 中的每个元素后面插入 str ，构造有个新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.jion(str)</span><br></pre></td></tr></table></figure><h3 id="2、列表（list）"><a href="#2、列表（list）" class="headerlink" title="2、列表（list）"></a>2、列表（list）</h3><h4 id="2-1-列表简介"><a href="#2-1-列表简介" class="headerlink" title="2.1 列表简介"></a>2.1 列表简介</h4><blockquote><p>python 中内置一种数据类型列表：list。 list 是一种有序的集合，可以随时添加和删除其中的元素，写在方括号之间、用逗号分隔。列表内的项目不必是相同的类型。</p></blockquote><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'spam'</span>,<span class="string">'eggs'</span>,<span class="number">100</span>,<span class="number">1234</span>]</span><br></pre></td></tr></table></figure><h4 id="2-2、列表的常见操作"><a href="#2-2、列表的常见操作" class="headerlink" title="2.2、列表的常见操作"></a>2.2、列表的常见操作</h4><p>1、列表的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用len()函数可以获得list元素的个数；</span></span><br><span class="line">nameslist = [<span class="string">'xiaowang'</span>,<span class="string">'xiaozhang'</span>,<span class="string">'xiaohua'</span>]</span><br><span class="line">len(nameslist)</span><br></pre></td></tr></table></figure><p>2、列表的访问</p><p>用索引来访问 list 中的每一个元素，记得索引从 0 开始：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nameslist = [<span class="string">'xiaowang'</span>,<span class="string">'xiaozhang'</span>,<span class="string">'xiaohua'</span>]</span><br><span class="line">print(nameslist[<span class="number">0</span>])</span><br><span class="line">  print(nameslist[<span class="number">1</span>])</span><br><span class="line">  print(nameslist[<span class="number">2</span>])</span><br><span class="line">  print(nameslist[<span class="number">3</span>])</span><br><span class="line">  结果：</span><br><span class="line">  xiaowang</span><br><span class="line">  xiaozhang</span><br><span class="line">  xiaohua</span><br><span class="line">  报错：list index out of range</span><br></pre></td></tr></table></figure><ul><li>注意：当索引超出范围，python 会报错 indexError，所以确保索引不要越界，最后一个元素的索引是 len(nameslist)-1, 或者直接用-1。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nameslist = [<span class="string">'xiaowang'</span>,<span class="string">'xiaozhang'</span>,<span class="string">'xiaohua'</span>]</span><br><span class="line"><span class="keyword">print</span>[nemeslist[<span class="number">-1</span>]]</span><br><span class="line">结果：</span><br><span class="line">xiaohua</span><br></pre></td></tr></table></figure><p>3、列表的切片</p><p>切片：根据下标的范围获取一部分数据，比如：列表，字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">切片的使用格式</span><br><span class="line">数据[起始下标：结束下标：步长]</span><br><span class="line">提示：起始下标默认为 0，结束下标是不包含的，步长为 1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用切片方法获得一部分数据</span></span><br><span class="line">result = my_str[<span class="number">1</span>:<span class="number">4</span>:<span class="number">1</span>]</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前三个</span></span><br><span class="line">result = my_str[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">print(result)</span><br><span class="line">result = my_str[:<span class="number">3</span>]</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>4、添加元素（append,extend,insert）</p><p>通过 append 可以向列表添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量A，默认有三个元素</span></span><br><span class="line">A = [<span class="string">'xiaowang'</span>,<span class="string">'xiaozhang'</span>,<span class="string">'xiaohua'</span>]</span><br><span class="line">print(<span class="string">"-----添加之前，列表A的数据-----"</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> A:</span><br><span class="line">print(tempName)</span><br><span class="line"><span class="comment"># 提示、并添加元素</span></span><br><span class="line">temp = input(<span class="string">'请输入要添加的学生的名字'</span>)</span><br><span class="line">A.append(temp)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-----添加滞后，列表A的数据-----'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> A:</span><br><span class="line">  print(tempName)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">结果：</span><br><span class="line">-----添加之前，列表A的数据-----</span><br><span class="line">xiaowang</span><br><span class="line">xiaozhang</span><br><span class="line">xiaohua</span><br><span class="line">请输入要添加的学生的名字xiaoyu</span><br><span class="line">-----添加滞后，列表A的数据-----</span><br><span class="line">xiaowang</span><br><span class="line">xiaozhang</span><br><span class="line">xiaohua</span><br><span class="line">xiaoyu</span><br></pre></td></tr></table></figure><p>通过 extend 可以将一个集合中的元素逐一添加到列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.append(b)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">a.extend(b)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert(index,objiet) 在指定位置 index 输入元素object</span></span><br><span class="line">a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">a.insert(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>5、修改元素</p><p>修改元素的时候，要通过下标来确定要修改的是哪个元素，然后才能进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量 A ,有 3 个元素</span></span><br><span class="line">A = [<span class="string">'xiaowang'</span>,<span class="string">'xiaozhang'</span>,<span class="string">'xiaohua'</span>]</span><br><span class="line">print(<span class="string">'------修改之前，列表A的数据------'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> A: </span><br><span class="line">    print(tempName)</span><br><span class="line"><span class="comment"># 修改元素</span></span><br><span class="line">A[<span class="number">1</span>] = <span class="string">'xiaolu'</span></span><br><span class="line">print(<span class="string">'-----修改之后，列表A的数据-----'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> A: </span><br><span class="line">    print(tempName)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">------修改之前，列表A的数据------</span><br><span class="line">xiaowang</span><br><span class="line">xiaozhang</span><br><span class="line">xiaohua</span><br><span class="line">-----修改之后，列表A的数据-----</span><br><span class="line">xiaowang</span><br><span class="line">xiaolu</span><br><span class="line">xiaohua</span><br></pre></td></tr></table></figure><p>6、查找元素</p><p>所谓查找元素，就是看看指定元素是否存在</p><p>python 中查找的常用方法为：</p><ul><li>in 存在，如果存在那么返回结果为 True 否则为 False</li><li>not in 不存在，如果不存在那么结果为 Ture 否则为 False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 待查找的对象</span></span><br><span class="line">nameList = [<span class="string">'xiaowang'</span>,<span class="string">'xiaozhang'</span>,<span class="string">'xiaohua'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户要查找的名字</span></span><br><span class="line">findName = input(<span class="string">'请输入要查找的名字：'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找是否存在</span></span><br><span class="line"><span class="keyword">if</span> findName <span class="keyword">in</span> nameList:</span><br><span class="line">    print(<span class="string">'在字典中找到了相同的名字'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'没找到'</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">请输入要查找的名字：xiaoming</span><br><span class="line">没找到</span><br></pre></td></tr></table></figure><p>index 和 count 与字符串中的用法相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line"><span class="comment"># a.index('a',1,3) 这一条会报错</span></span><br><span class="line">a.index(<span class="string">'a'</span>,<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">a.count(<span class="string">'b'</span>)</span><br><span class="line">a.count(<span class="string">'d'</span>)</span><br></pre></td></tr></table></figure><p>7、删除元素</p><p>列表元素常用删除方法：</p><ul><li>del: 根据下标进行删除</li><li>pop：删除最后一个元素</li><li>remove: 根据元素的值进行删除</li></ul><p>（1）del</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">print(<span class="string">'-----删除之前-----'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> list1:</span><br><span class="line">    print(tempName)</span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>]</span><br><span class="line">print(<span class="string">'-----删除之后-----'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> list1:</span><br><span class="line">    print(tempName)</span><br><span class="line">   </span><br><span class="line">结果：</span><br><span class="line">-----删除之前-----</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line">-----删除之后-----</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br></pre></td></tr></table></figure><p>（2）pop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">print(<span class="string">'-----删除之前-----'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> list2:</span><br><span class="line">    print(tempName)</span><br><span class="line">list2.pop()</span><br><span class="line">print(<span class="string">'-----删除之后-----'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> list2:</span><br><span class="line">    print(tempName) </span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">-----删除之前-----</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line">-----删除之后-----</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><p>（3）remove</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">list3 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">print(<span class="string">'-----删除之前-----'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> list3:</span><br><span class="line">    print(tempName)</span><br><span class="line">list2.remove(<span class="string">'e'</span>)</span><br><span class="line">print(<span class="string">'-----删除之后-----'</span>)</span><br><span class="line"><span class="keyword">for</span> tempName <span class="keyword">in</span> list3:</span><br><span class="line">    print(tempName)</span><br><span class="line">    </span><br><span class="line">结果：</span><br><span class="line">-----删除之前-----</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line">-----删除之后-----</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">f</span><br></pre></td></tr></table></figure><p>（4）排序</p><p>sort 方法是将 list 按特定殊勋重新排列，默认为由小到大，参数 reverse=true 可改为倒序，由大到小</p><p>reverse 方法是将 list 逆置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(a)</span><br><span class="line">a.reverse()</span><br><span class="line">print(a)</span><br><span class="line">a.sort()</span><br><span class="line">print(a)</span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="2-3、列表的遍历"><a href="#2-3、列表的遍历" class="headerlink" title="2.3、列表的遍历"></a>2.3、列表的遍历</h4><p>1、使用 for 循环</p><p>为了有效的输出列表的每个数据，可以使用循环来完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">namesList = [<span class="string">'xiaowang'</span>,<span class="string">'xiaozhang'</span>,<span class="string">'xiaohua'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> namesList:</span><br><span class="line">    print(name)</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">xiaowang</span><br><span class="line">xiaozhang</span><br><span class="line">xiaohua</span><br></pre></td></tr></table></figure><p>2、使用 while 循环</p><p>为了更有效的输出列表的每个数据，可以使用循环来完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">namesList = [<span class="string">'xiaowang'</span>,<span class="string">'xiaozhang'</span>,<span class="string">'xiaohua'</span>]</span><br><span class="line">length = len(namesList)</span><br><span class="line">i = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> i&lt;length:</span><br><span class="line">    print(namesList[i])</span><br><span class="line">    i += <span class="number">1</span> </span><br><span class="line">    </span><br><span class="line">结果：</span><br><span class="line">xiaowang</span><br><span class="line">xiaozhang</span><br><span class="line">xiaohua</span><br></pre></td></tr></table></figure><h3 id="3、元组（tuple）"><a href="#3、元组（tuple）" class="headerlink" title="3、元组（tuple）"></a>3、元组（tuple）</h3><p>另外一种有序列表叫元组：tuple, tuple 和 list 类似，但是 tuple 一旦初始化不能更改，比如同样累出同学的名字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates = (<span class="string">'Michael'</span>,<span class="string">'Bob'</span>,Tracy)</span><br></pre></td></tr></table></figure><p>现在，classmates 这个 tuple不能变了，它没有 append(),insert() 这样的方法。其他获取元素的方法和 list 一样，可以正常使用 classmate[0],xlassmate[1],但是不能赋值成为另外的元素。</p><p>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。不过可能，能用tuple代替list就尽量用tuple。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个 tuple 可以写成（）</span></span><br><span class="line">t = ()</span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line">()</span><br></pre></td></tr></table></figure><p>但是，如果要定义一个只有1个元素的tuple, 如果这么定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>)</span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>定义的不是tuple，而是1这个数！因为这个（）既可以表示tuple,也可以此表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况看小括号计算，计算结果是 1</p><p>所以只有一个元素的tuple定义时必须加个逗号 ，来消除歧义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,)</span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>python在显示只有一个元素的tuple时，也会加个逗号，以免产生误解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'a'</span>,<span class="string">'b'</span>,[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">(<span class="string">'a'</span>,<span class="string">'b'</span>,[<span class="string">'X'</span>,<span class="string">'Y'</span>])</span><br></pre></td></tr></table></figure><h3 id="4、字典（dict）"><a href="#4、字典（dict）" class="headerlink" title="4、字典（dict）"></a>4、字典（dict）</h3><h4 id="4-1、字典简介"><a href="#4-1、字典简介" class="headerlink" title="4.1、字典简介"></a>4.1、字典简介</h4><p>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值（key=&gt;value)对用冒号（：）分割，每个对之间用逗号（，）分割，整个字典包括在花括号{}中</p><p>举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Micheal'</span>,<span class="string">'Bob'</span>,<span class="string">'Tracy'</span>]</span><br><span class="line">score =[<span class="number">95</span>,<span class="number">97</span>,<span class="number">98</span>]</span><br></pre></td></tr></table></figure><p>给定一个名字，要查找对应的成绩，就先要在names中找到对顶的位置，再从scores取出对应的成绩，list越长，耗时越长。</p><p>如果用 dict 实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表多大，查找速度都不会变慢。用Python写一个dict如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'Micheal'</span>:<span class="number">95</span>,<span class="string">'Bob'</span>:<span class="number">75</span>,<span class="string">'Tracy'</span>:<span class="number">85</span>&#125;</span><br><span class="line">d[<span class="string">'Micheal'</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">95</span></span><br></pre></td></tr></table></figure><p>由于一个 key 只能对应一个value，所以，多次对一个key放入value，后面的值会吧前面的值冲掉：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">'Jack'</span>] = <span class="number">90</span></span><br><span class="line">d[<span class="string">'Jack'</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">90</span></span><br><span class="line"></span><br><span class="line">d[<span class="string">'Jack'</span>] = <span class="number">88</span></span><br><span class="line">d[<span class="string">'Jack'</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">88</span></span><br></pre></td></tr></table></figure><p>如果key不存在，dic就会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">'Thomas'</span>]</span><br><span class="line">报错</span><br></pre></td></tr></table></figure><h4 id="4-2-字典的常规操作"><a href="#4-2-字典的常规操作" class="headerlink" title="4.2 字典的常规操作"></a>4.2 字典的常规操作</h4><p>（1）修改元素</p><p>每个字典中的数据是可以修改的，只要通过key找到，即可修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">new_id = input(<span class="string">'请输入新的学号：'</span>)</span><br><span class="line">info[<span class="string">'id'</span>] = int(new_id)</span><br><span class="line">print(<span class="string">'修改滞后的id为：%d'</span> % info[<span class="string">'id'</span>])</span><br></pre></td></tr></table></figure><p>（2） 添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">print(<span class="string">'id为：%d'</span> % info[<span class="string">'id'</span>])</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-1</span><span class="number">-537</span>dc1e23114&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> info = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">----&gt; 2 print('id为：%d' % info['id'])</span><br><span class="line"></span><br><span class="line">KeyError: <span class="string">'id'</span></span><br></pre></td></tr></table></figure><p>如果在使用 变量名[‘键’] = 数据 时，这个‘键’在字典中，不存在，那么就会新增这个元素。</p><p>添加新的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line"><span class="comment"># print('id为：%d' % info['id'])</span></span><br><span class="line">newId = input(<span class="string">'请输入新的学号：'</span>)</span><br><span class="line">info[<span class="string">'id'</span>] = int(newId)</span><br><span class="line">print(<span class="string">'添加滞后的id为:%d'</span> % info[<span class="string">'id'</span>])</span><br><span class="line"></span><br><span class="line">请输入新的学号：<span class="number">888</span></span><br><span class="line">添加滞后的id为:<span class="number">888</span></span><br></pre></td></tr></table></figure><p>（3）删除元素</p><p>对字典进行删除操作，有以下几种</p><ul><li>del</li><li>clear()</li></ul><p>del 删除指定的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">print(<span class="string">'删除前，%s'</span> % info[<span class="string">'name'</span>])</span><br><span class="line"><span class="keyword">del</span> info[<span class="string">'name'</span>]</span><br><span class="line"><span class="keyword">del</span> info[<span class="string">'name'</span>]</span><br><span class="line">print(<span class="string">'删除后，%s'</span> % info[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line">删除前，kkb</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-11</span>-fb8f36e7ab49&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">2</span> print(<span class="string">'删除前，%s'</span> % info[<span class="string">'name'</span>])</span><br><span class="line">      <span class="number">3</span> <span class="keyword">del</span> info[<span class="string">'name'</span>]</span><br><span class="line">----&gt; 4 del info['name']</span><br><span class="line">      <span class="number">5</span> print(<span class="string">'删除后，%s'</span> % info[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line">KeyError: <span class="string">'name'</span></span><br></pre></td></tr></table></figure><p>del 删除整个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">print(<span class="string">'删除前，%s'</span> % info)</span><br><span class="line"><span class="keyword">del</span> info</span><br><span class="line">print(<span class="string">'删除后，%s'</span> % info)</span><br><span class="line"></span><br><span class="line">删除前，&#123;<span class="string">'name'</span>: <span class="string">'kkb'</span>, <span class="string">'sex'</span>: <span class="string">'f'</span>, <span class="string">'address'</span>: <span class="string">'中国北京'</span>&#125;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-12</span>-d5ad1a4a8131&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">2</span> print(<span class="string">'删除前，%s'</span> % info)</span><br><span class="line">      <span class="number">3</span> <span class="keyword">del</span> info</span><br><span class="line">----&gt; 4 print('删除后，%s' % info)</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'info'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>clear 清楚整个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">print(<span class="string">'删除前，%s'</span> % info)</span><br><span class="line">info.clear()</span><br><span class="line">print(<span class="string">'清除后，%s'</span> % info)</span><br><span class="line"></span><br><span class="line">删除前，&#123;<span class="string">'name'</span>: <span class="string">'kkb'</span>, <span class="string">'sex'</span>: <span class="string">'f'</span>, <span class="string">'address'</span>: <span class="string">'中国北京'</span>&#125;</span><br><span class="line">清除后，&#123;&#125;</span><br></pre></td></tr></table></figure><p>（4）len()</p><p>测量字典中，键值对的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">print(len(d1))</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>（5）keys</p><p>返回一个包含字典所有key的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">print(d1.keys())</span><br><span class="line">print(list(d1.keys()))</span><br><span class="line"></span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'sex'</span>, <span class="string">'address'</span>])</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'sex'</span>, <span class="string">'address'</span>]</span><br></pre></td></tr></table></figure><p>（6）values</p><p>返回一个包含字典所有value的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">print(d1.values())</span><br><span class="line">print(list(d1.values()))</span><br><span class="line"></span><br><span class="line">dict_values([<span class="string">'kkb'</span>, <span class="string">'f'</span>, <span class="string">'中国北京'</span>])</span><br><span class="line">[<span class="string">'kkb'</span>, <span class="string">'f'</span>, <span class="string">'中国北京'</span>]</span><br></pre></td></tr></table></figure><p>（7）items</p><p>返回一个包含所有（键，值）元组的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;<span class="string">'name'</span>:<span class="string">'kkb'</span>,<span class="string">'sex'</span>:<span class="string">'f'</span>,<span class="string">'address'</span>:<span class="string">'中国北京'</span>&#125;</span><br><span class="line">print(d1.items())</span><br><span class="line">print(list(d1.items()))</span><br><span class="line"></span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'kkb'</span>), (<span class="string">'sex'</span>, <span class="string">'f'</span>), (<span class="string">'address'</span>, <span class="string">'中国北京'</span>)])</span><br><span class="line">[(<span class="string">'name'</span>, <span class="string">'kkb'</span>), (<span class="string">'sex'</span>, <span class="string">'f'</span>), (<span class="string">'address'</span>, <span class="string">'中国北京'</span>)]</span><br></pre></td></tr></table></figure><p>（8）has_key (python3 已取消)</p><p>dict.has_key(key) 如果key在字典中，返回Ture, 否则返回 False。</p><h3 id="5、集合（set）"><a href="#5、集合（set）" class="headerlink" title="5、集合（set）"></a>5、集合（set）</h3><p>集合（set）是一个无序不重复元素序列</p><p>可以使用大括号{} 或者set() 函数创建集合，注意创建一个空集合必须使用 set(), 因为{} 是用来创建空字典的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_set = &#123;1,4,'abc','hello'&#125;</span></span><br><span class="line"><span class="comment"># 不支持下标赋值和取值</span></span><br><span class="line"><span class="comment"># my_set[0] = 3</span></span><br><span class="line"><span class="comment"># value = my_set[0]</span></span><br><span class="line"><span class="comment"># print(value)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过遍历获取数据</span></span><br><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> my_set:</span><br><span class="line">    print(value)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(my_set):</span><br><span class="line">    print(index,value)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义空的集合时不能直接使用&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">my_set = set()</span><br><span class="line">my_set.add(<span class="number">1</span>)</span><br><span class="line">my_set.add(<span class="number">1</span>)</span><br><span class="line">print(my_set,type(my_set))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合可以对容器类型数据去重</span></span><br><span class="line">my_list = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 把列表转换为集合</span></span><br><span class="line">my_set = set(my_list)</span><br><span class="line">print(my_set)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表，元组，集合 三者可以相互转换</span></span><br><span class="line">my_tuple = (<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">print(my_tuple,type(my_tuple))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">7</span></span><br><span class="line">&#123;<span class="number">1</span>&#125; &lt;<span class="class"><span class="keyword">class</span> '<span class="title">set</span>'&gt;</span></span><br><span class="line">&#123;1, 3, 5&#125;</span><br><span class="line">(<span class="number">5</span>, <span class="number">3</span>) &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-基础二&quot;&gt;&lt;a href=&quot;#Python-基础二&quot; class=&quot;headerlink&quot; title=&quot;Python 基础二&quot;&gt;&lt;/a&gt;Python 基础二&lt;/h1&gt;&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Python" scheme="https://ChubbyLEE-Math.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://ChubbyLEE-Math.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python 基础一</title>
    <link href="https://chubbylee-math.github.io/2020/07/07/Python%20%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>https://chubbylee-math.github.io/2020/07/07/Python%20%E5%9F%BA%E7%A1%80%E4%B8%80/</id>
    <published>2020-07-07T07:09:56.156Z</published>
    <updated>2020-07-07T07:24:50.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-基础"><a href="#Python-基础" class="headerlink" title="Python 基础"></a>Python 基础</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h3><p>注释：对代码进行解释说明，提供代码可读性。</p><p>注释分为单行注释和多行注释，单行注释 以 # 号开头，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单行注释#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># a </span></span><br><span class="line"><span class="comment"># a   #多选 ctrol + ? </span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">abs</span></span><br><span class="line"><span class="string">abs</span></span><br><span class="line"><span class="string">abs  </span></span><br><span class="line"><span class="string">'''</span>  <span class="comment"># 因为把它变成了字符串 也起到了注释的作用</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">"""</span>  <span class="comment"># 快捷键 ctr + / 或者 ？</span></span><br></pre></td></tr></table></figure><h3 id="2、变量的定义"><a href="#2、变量的定义" class="headerlink" title="2、变量的定义"></a>2、变量的定义</h3><p>变量：通俗理解就是储存程序数据的容器</p><p>变量定义的格式：变量名 = 数据 （变量名尽量有含义，方便理解）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、变量的定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量名 = 数据</span></span><br><span class="line">name = <span class="string">"张三"</span> <span class="comment"># str 类型</span></span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line">pi = <span class="number">3.14</span> <span class="comment"># float 类型</span></span><br><span class="line">print(pi)</span><br><span class="line"></span><br><span class="line">is_ok = true <span class="comment"># bool 类型</span></span><br><span class="line">print(is_ok)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分数</span></span><br><span class="line">score = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要这样，尽量有意义。或者加注释说明 </span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意:第一次命名定义了一个变量，后面再出现相同的名字时，是重新赋值。</span></span><br><span class="line">money = <span class="number">50</span></span><br><span class="line">money = money <span class="number">-10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 不需要指定的数据类型，会根据数据自动推导出数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 type 查看变量类型</span></span><br><span class="line">score_type = type(score)</span><br><span class="line">print(score_type)</span><br><span class="line"></span><br><span class="line">name_type = type(name)</span><br><span class="line">print(name_type)</span><br><span class="line"></span><br><span class="line">pi_type = type(pi)</span><br><span class="line">print(pi_type)</span><br><span class="line"></span><br><span class="line">print(type(is_ok))</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong>：常用数据类型 int, str,  float, bool.                 (容器)list,  tuple, dict, set</li></ul><h3 id="3、变量的命名规则"><a href="#3、变量的命名规则" class="headerlink" title="3、变量的命名规则"></a>3、变量的命名规则</h3><p>由字母、数字、下划线组成，且不能以数字开头。特殊符号（1-9 数字键位上的都不能有）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 驼峰命名法和下划线命名法</span></span><br><span class="line">my_name = <span class="string">'李四'</span> <span class="comment"># 下划线命名法 推荐使用</span></span><br><span class="line">myName = <span class="string">'王五'</span> <span class="comment"># 小驼峰</span></span><br><span class="line">MyName = <span class="string">'赵六'</span> <span class="comment"># 大驼峰 一般在面向对象 面现象类时才使用</span></span><br></pre></td></tr></table></figure><h3 id="4、关键字"><a href="#4、关键字" class="headerlink" title="4、关键字"></a>4、关键字</h3><p>在 python 中关键字不能作为变量名。一般有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">print(keyword.kwlist)</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'async'</span>, <span class="string">'await'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><ul><li><strong>注</strong> ：文件名命名 python.py 不好，容易在运行其他文件时错用。</li></ul><h3 id="5、常用数据类型转换"><a href="#5、常用数据类型转换" class="headerlink" title="5、常用数据类型转换"></a>5、常用数据类型转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mun = <span class="number">10</span></span><br><span class="line">my_str = <span class="string">'zs'</span></span><br><span class="line">my_str = str(mun) <span class="comment"># 将 mun 转化为字符串</span></span><br><span class="line"></span><br><span class="line">my_str = <span class="string">'10'</span> </span><br><span class="line">mun = int(my_str) <span class="comment"># 将字符串转化为数字</span></span><br><span class="line"></span><br><span class="line">print(type(my_str))</span><br><span class="line">print(type(mun)) <span class="comment"># 如果 my_str = ‘ab’ 不能再转化为正数型</span></span><br></pre></td></tr></table></figure><p>常用数据类型转换：</p><table><thead><tr><th align="left"><strong>函数</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">int(x [,base])</td><td align="center">将 x 转换为一个整数</td></tr><tr><td align="left">float(x)</td><td align="center">将 x 转换为一个浮点型</td></tr><tr><td align="left">complex(real[,imag])</td><td align="center">创建一个复数，real 为实部，imag 为虚部</td></tr><tr><td align="left">str(x)</td><td align="center">将对象 x 转换为一个字符串</td></tr><tr><td align="left">repr(x)</td><td align="center">将对象 x 转化为一个表达式字符串</td></tr><tr><td align="left">eval(str)</td><td align="center">用来计算在字符串中的有效 python 表达式并返回一个对象</td></tr><tr><td align="left">tuple(s)</td><td align="center">将 s 转化为一个元组</td></tr><tr><td align="left">list(s)</td><td align="center">将 s 转化为一个列表</td></tr><tr><td align="left">chr(x)</td><td align="center">将一个整数转化为一个 Unicode 字符</td></tr><tr><td align="left">ord(x)</td><td align="center">讲一个字符转化为它的 ASXII 整数值</td></tr><tr><td align="left">hex(x)</td><td align="center">将一个整数转化为一个十六进制字符串</td></tr><tr><td align="left">oct(x)</td><td align="center">讲一个整数转化为一个八进制字符串</td></tr><tr><td align="left">bin(x)</td><td align="center">将一个整数转化为一个二进制字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = input(<span class="string">'输入你的年龄：'</span>)</span><br><span class="line">print(age)</span><br><span class="line"><span class="comment"># print(age+1) 会报错，因为 age 是字符串</span></span><br><span class="line">print(int(age)+<span class="number">1</span>) <span class="comment"># 只能作用于数字类型的字符串</span></span><br></pre></td></tr></table></figure><h3 id="6、输入和输出"><a href="#6、输入和输出" class="headerlink" title="6、输入和输出"></a>6、输入和输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'1'</span>)</span><br><span class="line">print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出多个变量，中间用 ， 分割</span></span><br><span class="line">str1 = <span class="string">'hello'</span></span><br><span class="line">str2 = <span class="string">'world'</span></span><br><span class="line">print(str1,str2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改多个变量之间的分割符</span></span><br><span class="line">print(str1,str2,sep=<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认有一个换行符 print 源码结尾有个换行 \n</span></span><br><span class="line">print(<span class="string">'hello'</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># jupyter 中查函数的源码 </span></span><br><span class="line">python？？</span><br><span class="line">？？ python</span><br><span class="line">help(<span class="string">'print'</span>)</span><br><span class="line"><span class="comment">#Pycharm 中按住ctrl + 鼠标左键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">input(<span class="string">'请输入：'</span>) <span class="comment"># 所有返回来的值是 str 类型</span></span><br><span class="line"><span class="comment"># py3 中的 input 是一个字符串  py2中：raw_input</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查版本</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> version_info</span><br><span class="line"><span class="keyword">if</span> version_info.major == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'python2'</span>)</span><br><span class="line"><span class="keyword">elif</span> version_info.major == <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'python3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入多个</span></span><br><span class="line"> str1 = input(<span class="string">'请输入：'</span>).split(<span class="string">','</span>) <span class="comment"># 返回的是一个 list 列表</span></span><br><span class="line"> print(str1)</span><br><span class="line"> print(str1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="7、格式化输出"><a href="#7、格式化输出" class="headerlink" title="7、格式化输出"></a>7、格式化输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'zs'</span></span><br><span class="line">age = <span class="number">10</span></span><br><span class="line">print(<span class="string">'我叫%s，年龄%d'</span>%(name,age))</span><br></pre></td></tr></table></figure><ul><li><p>格式化符号：%s , %d , %f , %x </p></li><li><p>%s 输出字符串， %d 输出 int 型数字， %f  输出浮点， %x 输出 16 进制数据</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># format 格式化函数</span></span><br><span class="line">print(<span class="string">'我叫&#123;&#125;,年龄&#123;&#125;'</span>).format(name,age)</span><br><span class="line">print(<span class="string">'我叫&#123;na&#125;,年龄&#123;ag&#125;'</span>.format(na = name,ag = age)</span><br><span class="line">print(<span class="string">'我叫&#123;0&#125;,年龄&#123;1&#125;'</span>.format(name,age)</span><br><span class="line">      name = <span class="string">'zip'</span> age = <span class="number">10</span></span><br><span class="line"><span class="comment"># print('我叫%s，年龄%d' % (name,age))</span></span><br><span class="line"><span class="comment"># print('我叫&#123;na&#125;,年龄&#123;ag&#125;'.format(na = name,ag = age))</span></span><br><span class="line"><span class="comment"># print('我叫&#123;&#125;，年龄&#123;&#125;'.format(name,age))</span></span><br><span class="line"><span class="comment"># print('我叫&#123;0&#125;，年龄&#123;1&#125;'.format(name,age))</span></span><br></pre></td></tr></table></figure><h3 id="8、if-语句"><a href="#8、if-语句" class="headerlink" title="8、if 语句"></a>8、if 语句</h3><p>判断版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查版本</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> version_info</span><br><span class="line"><span class="keyword">if</span> version_info.major == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'python2'</span>)</span><br><span class="line"><span class="comment">#elif version_info.major == 3:</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'python3'</span>)</span><br></pre></td></tr></table></figure><p>条件判断格式，多条件判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多条件判断</span></span><br><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'kid'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个 elif 语句</span></span><br><span class="line"><span class="keyword">if</span> &lt;判断条件&gt;：</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;判断条件&gt;：</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;判断条件&gt;：</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure><p>逻辑运算符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line"><span class="comment"># and 与 多个条件同时成立，结果 Ture ，只要有一个 False，结果就是 False</span></span><br><span class="line"><span class="comment"># or 或 只要有一个条件成立，结果 Ture，多个条件都是False，结果为False</span></span><br><span class="line"><span class="comment"># not 取反</span></span><br><span class="line"><span class="comment"># score = 90</span></span><br><span class="line"><span class="comment"># if score &gt; 0 and score&lt;=90:</span></span><br><span class="line"><span class="comment">#     print('成立')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在加条件 or （与或非的优先级）</span></span><br><span class="line"><span class="comment"># 不知掉优先级时用（）</span></span><br><span class="line"><span class="comment"># print(True or True and False)</span></span><br><span class="line"><span class="comment"># print(not True and False)</span></span><br></pre></td></tr></table></figure><ul><li>总结：not &gt; and &gt; or </li></ul><h3 id="9、运算符"><a href="#9、运算符" class="headerlink" title="9、运算符"></a>9、运算符</h3><p> 9.1 算数运算符</p><p>a = 10 , b = 20</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两个对象相加 a + b 输出结果  30</td></tr><tr><td>-</td><td>减</td><td>得到负数或者一个数减去另一个数 a - b 输出结果为 -10</td></tr><tr><td>*</td><td>乘</td><td>两个数相乘或是返回一个呗重复若干次的字符串 a * b 输出结果 200</td></tr><tr><td>/</td><td>除</td><td>b / a 输出结果 2</td></tr><tr><td>//</td><td>取整</td><td>返回商的整数部分 9 // 2 输出结果为 4 ，9.0 // 2.0 输出结果 4.0</td></tr><tr><td>%</td><td>取余</td><td>返回除法的余数 b % a 输出结果 0</td></tr><tr><td>**</td><td>指数</td><td>a ** b 10 的 20 次方，输出结果 100000000000000000000</td></tr></tbody></table><hr><ul><li>混合运算时，优先顺序为： ** 高于 *    /  % // 高于 + -，为了避免歧义，建议用（）来处理优先级别。</li><li>不同类型的数字在进行混合运算时，整数会转换为浮点型进行运算。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">3.1415</span> <span class="comment"># float</span></span><br><span class="line">print(int(num1))</span><br><span class="line">num1 = <span class="number">3.1415</span> <span class="comment"># float</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(int(num1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入</span></span><br><span class="line"><span class="comment"># print(round(num1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入小数点 2 位</span></span><br><span class="line"><span class="comment"># print(round(num1,2))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留 n 位小数，不进行四舍五入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.1415*1000 取整 再除以 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#封装</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num,n)</span>:</span></span><br><span class="line">    <span class="comment"># 做什么</span></span><br><span class="line">    d = <span class="number">10</span>**(-n)</span><br><span class="line">    <span class="keyword">return</span> (num//d)*d</span><br><span class="line">abc = func(num1,<span class="number">3</span>) <span class="comment"># type(abc)   float</span></span><br><span class="line">print(abc)</span><br><span class="line"><span class="comment"># help("return")</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双层 for 循环</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">'i的结果：&#123;&#125;'</span>.format(i))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'t的结果&#123;&#125;'</span>.format(t)) <span class="comment">#1-25</span></span><br></pre></td></tr></table></figure><p>9.2 赋值运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>赋值运算符</td><td>把 等号右边赋给左边的变量，如 num=1+2*3结果为num = 7</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单变量赋值</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多变量赋值</span></span><br><span class="line">num1，num2，f1，str1 = <span class="number">100</span>，<span class="number">200</span>，<span class="number">3.14</span>，“hello”</span><br></pre></td></tr></table></figure><p>9.3 复合运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c +=a 等效于 c = c+a</td></tr><tr><td>.=</td><td>减法赋值运算符</td><td>c -=a 等效于 c = c-a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c <em>=a 等效于 c = c\</em>a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /=a 等效于 c = c/a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %=a 等效于 c =c%a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c *<em>=a 等效于 c =c\</em>*a</td></tr><tr><td>//=</td><td>取整赋值运算符</td><td>c //=a 等效于 c =c//a</td></tr></tbody></table><h3 id="10、循环"><a href="#10、循环" class="headerlink" title="10、循环"></a>10、循环</h3><p>程序执行的三大流程：顺序执行、选择执行（if）、循环执行 while    for</p><blockquote><p>conda 中选中，按 L 调出行标</p></blockquote><ul><li>循环要有结束条件，死循环</li></ul><p>10.1、while 循环语句语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件：</span><br><span class="line">条件满足时，做事情<span class="number">1</span></span><br><span class="line">  条件满足时，做事情<span class="number">2</span></span><br><span class="line">  条件满足时，做事情<span class="number">3</span></span><br></pre></td></tr></table></figure><p>例如: 输出  100 条 helloword</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;<span class="number">100</span>:</span><br><span class="line">print(<span class="string">'hello world'</span>)</span><br><span class="line">  i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Python 提供 range() 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range(1,6) 可迭代对象</span></span><br><span class="line"><span class="comment"># range(起始数据，结束数据，步长)，步长默认是 1，不包含结束数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for</span></span><br><span class="line">print(list(range(<span class="number">1</span>,<span class="number">6</span>)))</span><br><span class="line">print(list(range(<span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p> 配合 for 做循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)： <span class="comment"># [0,1,2,3,4]</span></span><br><span class="line">print(i)</span><br><span class="line"><span class="comment"># 效果等同于 while 循环</span></span><br><span class="line"></span><br><span class="line">i= <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;= <span class="number">5</span>:</span><br><span class="line">  print(i)</span><br><span class="line">  i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>练习 9*9 乘法表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9*9 乘法表</span></span><br><span class="line">i = <span class="number">1</span> </span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>: <span class="comment"># 行数</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j&lt;= i: <span class="comment">#列数</span></span><br><span class="line">        <span class="comment"># print('%d * %d = %d' % (j,i,j*i))</span></span><br><span class="line">        print(<span class="string">'&#123;&#125; * &#123;&#125; = &#123;&#125;'</span>.format(j,i,i*j),end = <span class="string">'\t'</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>跳出循环 continue break </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">3</span>:</span><br><span class="line">        num +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(num)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"><span class="comment"># 输出结果 1 2 4 5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">3</span>:</span><br><span class="line">        num +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(num)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"><span class="comment"># 输出结果 1 2</span></span><br></pre></td></tr></table></figure><ul><li>continue 结束当前循环  break 结束整个循环</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-基础&quot;&gt;&lt;a href=&quot;#Python-基础&quot; class=&quot;headerlink&quot; title=&quot;Python 基础&quot;&gt;&lt;/a&gt;Python 基础&lt;/h1&gt;&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Python" scheme="https://ChubbyLEE-Math.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://ChubbyLEE-Math.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chubbylee-math.github.io/2020/06/12/hello-world/"/>
    <id>https://chubbylee-math.github.io/2020/06/12/hello-world/</id>
    <published>2020-06-12T01:02:33.140Z</published>
    <updated>2020-06-17T02:32:07.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="paopao"><a href="#paopao" class="headerlink" title="paopao"></a>paopao</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;paopao&quot;&gt;&lt;a href=&quot;#paopao&quot; class=&quot;headerlink&quot; title=&quot;paopao&quot;&gt;&lt;/a&gt;paopao&lt;/h2&gt;&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://ChubbyLEE-Math.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="测试" scheme="https://ChubbyLEE-Math.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
